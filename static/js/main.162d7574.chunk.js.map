{"version":3,"sources":["components/FlipCard/FlipCard.js","data/stockData.js","App.js","serviceWorker.js","index.js"],"names":["FlipCard","front","back","title","class","src","stockData","App","className","map","card","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ySAmBeA,G,YAhBE,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAC/B,OACE,yBAAKC,MAAM,aACT,yBAAKA,MAAM,mBACT,yBAAKA,MAAM,mBACT,yBAAKC,IAAKJ,KAEZ,yBAAKG,MAAM,kBACT,4BAAKD,GACL,2BAAID,QCZDI,EAAY,CACvB,CACEL,MAAO,6GACPC,KACE,qOACFC,MAAO,gBAET,CACEF,MAAO,+FACPC,KAAM,+EACNC,MAAO,6BAET,CACEF,MAAO,wFACPC,KACE,wPACFC,MAAO,qBAET,CACEF,MAAO,mFACPC,KACE,2UACFC,MAAO,sBCHII,E,uKAVX,OACE,yBAAKC,UAAU,OACZF,EAAUG,KAAI,SAACC,GACd,OAAO,kBAAC,EAAD,CAAUT,MAAOS,EAAKT,MAAOC,KAAMQ,EAAKR,KAAMC,MAAOO,EAAKP,gB,GALzDQ,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.162d7574.chunk.js","sourcesContent":["import React from \"react\";\nimport s from \"./FlipCard.css\";\n\nconst FlipCard = ({ front, back, title }) => {\n  return (\n    <div class='flip-card'>\n      <div class='flip-card-inner'>\n        <div class='flip-card-front'>\n          <img src={front} />\n        </div>\n        <div class='flip-card-back'>\n          <h2>{title}</h2>\n          <p>{back}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FlipCard;\n","export const stockData = [\n  {\n    front: \"https://www.best-trading-platforms.com/sites/default/files/Chart-Pattern-1-2-3-4-Jeff-Cooper-No-Signal.png\",\n    back:\n      \"Strong stock only see weakness for a short period of time and then are ready to run up and move higher once again. Look for 3 day weakness, consecutively getting lower lows then that will trigger a third day high, and breakout\",\n    title: \"1234 Pattern\",\n  },\n  {\n    front: \"https://www.timothysykes.com/wp-content/uploads/2019/01/NBEV-flat-top-breakout-June-2018.png\",\n    back: \"when the price will breakout by moving above the top of the flat top pattern\",\n    title: \"Flat Top Breakout Pattern\",\n  },\n  {\n    front: \"https://a.c-dn.net/b/2oIN6k/bullish-flag-pattern_body_IDENTIFYINGFLAGOLE.png.full.png\",\n    back:\n      \"A bull flag pattern is a chart pattern that occurs when a stock is in a strong uptrend. It is called a flag pattern because when you see it on a chart it looks like a flag on a pole and since we are in an uptrend it is considered a bullish flag.\",\n    title: \"Bull Flag Pattern\",\n  },\n  {\n    front: \"https://www.investorsunderground.com/wp-content/uploads/2017/03/redgreenmove.jpg\",\n    back:\n      \"When a stock is trading below the previous day's closing price, it is considered to be “red,” whereas if it is trading above the previous day's closing price, it is considered to be “green.” When a stock goes from red to green, the share price moves from below the previous close to above the previous close.\",\n    title: \"Red to Green Move\",\n  },\n  //  {\n  //   front:,\n  //   back:,\n  //   title:\"\",\n  // },\n  //  {\n  //   front:,\n  //   back:,\n  //   title:\"\",\n  // },\n  //  {\n  //   front:,\n  //   back:,\n  //   title:\"\",\n  // },\n  //  {\n  //   front:,\n  //   back:,\n  //   title:\"\",\n  // },\n];\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n// components\nimport FlipCard from \"./components/FlipCard/FlipCard\";\n\n// data\nimport { stockData } from \"./data/stockData\";\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        {stockData.map((card) => {\n          return <FlipCard front={card.front} back={card.back} title={card.title} />;\n        })}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}